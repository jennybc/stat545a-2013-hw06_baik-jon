setwd("Dropbox/School/Grad/STAT545A/misc/")
# install.packages("RSQLite", dependencies=TRUE)
library(RSQLite)
con <- dbConnect("SQLite", "parkingtickets.sqlite")
test1 <- dbGetQuery(con, "SELECT * FROM parkingtickets_offence")
# The actual data
test2 <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
unique(test2$street_name)
dbDisconnect(con)
library(RSQLite)
con <- dbConnect("SQLite", "parkingtickets.sqlite")
dbListTables(con)
# List of tickets
test1 <- dbGetQuery(con, "SELECT * FROM parkingtickets_offence")
# The actual data
test2 <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
unique(test2$street_name)
dbDisconnect(con)
library(RSQLite)
con <- dbConnect("SQLite", "parkingtickets.sqlite")
library(RSQLite)
offences <- dbGetQuery(con, "SELECT * FROM parkingtickets_offence")
# The actual parking ticket data
tickets <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
str(offences)
offences
str(tickets)
summary(offences)
summary(tickets)
dim(tickets)
head(tickets)
dbListTables(con)
dbDisconnect(con)
ticket.db <- "raw_data/parkingtickets.sqlite"
con <- dbConnect("SQLite", ticket.db)
con
dbListTables(con)
offences <- dbGetQuery(con, "SELECT * FROM parkingtickets_offence")
# The actual parking ticket data
# This one takes a little longer... up to around 30 seconds on my machine
tickets <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
# Check the data
str(offences)
offences
str(tickets)
dim(tickets) # WOW, 1.5 million rows. This'll be fun.
summary(tickets)
head(tickets)
# Check out the street names
unique(tickets$street_name)
dbDisconnect(con)
library("RSQLite")
dl_from_dropbox <- function(x, key) {
require(RCurl)
bin <- getBinaryURL(paste0("https://dl.dropboxusercontent.com/s/", key, "/", x),
ssl.verifypeer = FALSE)
con <- file(x, open = "wb")
writeBin(bin, con)
close(con)
message(noquote(paste(x, "read into", getwd())))
}
dl_from_dropbox("readme.txt", "e83w6mhpl3i1epu")
dl_from_dropbox("raw_data/readme.txt", "14072013")
# Function for downloading files from Dropbox
# Adapted from http://thebiobucket.blogspot.ca/2013/04/download-files-from-dropbox.html
dl_from_dropbox <- function(x, key) {
require(RCurl)
bin <- getBinaryURL(paste0("https://dl.dropboxusercontent.com/u/", key, "/", x),
ssl.verifypeer = FALSE)
con <- file(x, open = "wb")
writeBin(bin, con)
close(con)
message(noquote(paste(x, "read into", getwd())))
}
# Example:
dl_from_dropbox("raw_data/readme.txt", "14072013")
# Function for downloading files from Dropbox
# Adapted from http://thebiobucket.blogspot.ca/2013/04/download-files-from-dropbox.html
dl_from_dropbox <- function(x, key) {
require(RCurl)
bin <- getBinaryURL(paste0("https://dl.dropboxusercontent.com/u/", key, "/raw_data/", x),
ssl.verifypeer = FALSE)
con <- file(x, open = "wb")
writeBin(bin, con)
close(con)
message(noquote(paste(x, "read into", getwd())))
}
dl_from_dropbox("readme.txt", "14072013")
# Example:
dl_from_dropbox("readme.txt", "14072013", "temp/readme.txt")
# Function for downloading files from Dropbox
# Adapted from http://thebiobucket.blogspot.ca/2013/04/download-files-from-dropbox.html
dl_from_dropbox <- function(x, key, downloadTo) {
require(RCurl)
bin <- getBinaryURL(paste0("https://dl.dropboxusercontent.com/u/", key, "/raw_data/", x),
ssl.verifypeer = FALSE)
if(missing(downloadTo)) downloadTo <- x
con <- file(x, open = "wb")
writeBin(bin, con)
close(con)
message(noquote(paste(x, "read into", getwd())))
}
# Example:
dl_from_dropbox("readme.txt", "14072013", "temp/readme.txt")
dl_from_dropbox <- function(x, key, toFolder) {
require(RCurl)
bin <- getBinaryURL(paste0("https://dl.dropboxusercontent.com/u/", key, "/raw_data/", x),
ssl.verifypeer = FALSE)
if(!missing(toFolder)) setwd(toFolder)
con <- file(x, open = "wb")
writeBin(bin, con)
close(con)
message(noquote(paste(x, "read into", getwd())))
}
# Example:
dl_from_dropbox("readme.txt", "14072013", "temp/")
library(RSQLite)
# Check the data set
ticket.db <- "raw_data/parkingtickets.sqlite"
# Create the connection to the file
con <- dbConnect("SQLite", ticket.db)
getwd()
setwd("../")
getwd()
library(RSQLite)
# Check the data set
ticket.db <- "raw_data/parkingtickets.sqlite"
# Create the connection to the file
con <- dbConnect("SQLite", ticket.db)
# List all the tables in the data base
dbListTables(con)
(tables <- dbListTables(con))
# List of possible offences
offences <- dbGetQuery(con, "SELECT * FROM parkingtickets_offence")
# The actual parking ticket data
# This one takes a little longer... up to around 30 seconds on my machine
tickets <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
str(offences)
offences
str(tickets)
dim(tickets) # WOW, 1.5 million rows. This'll be fun.
summary(tickets)
head(tickets)
unique(tickets$street_name)
dbDisconnect(con)
con <- dbConnect("SQLite", ticket.db)
(tables <- dbListTables(con))
dir.create("data")
i <- 1
tables[i]
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
# Save the data as csv, to be read by programs outside of R
tmp
paste("SELECT * FROM", tables[i])
i <- 2
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
tmp
i <- 3
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
tmp
i <- 4
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
tmp
# Now go through all the tables and save them
for(i in 1:length(tables)) {
# Read the data from data base
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
# Some of the data tables are empty! Only save if non-empty
if(nrow(tmp)>0) {
# Save the data as csv, to be read by programs outside of R
write.csv(tmp, paste0("data/", tables[i], ".csv"))
# Save the data as an R binary file (rds)
saveRDS(tmp, paste0("data/", tables[i], ".rds"))
}
# Lets check the progress
print(sprintf("Finished %s of %s", i, length(tables)))
}
?write.csv
# Now go through all the tables and save them
for(i in 1:length(tables)) {
# Read the data from data base
tmp <- dbGetQuery(con, paste("SELECT * FROM", tables[i]))
# Some of the data tables are empty! Only save if non-empty
if(nrow(tmp)>0) {
# Save the data as csv, to be read by programs outside of R
write.csv(tmp, paste0("data/", tables[i], ".csv"), row.names=FALSE)
# Save the data as an R binary file (rds)
saveRDS(tmp, paste0("data/", tables[i], ".rds"))
}
# Lets check the progress
print(sprintf("Finished %s of %s", i, length(tables)))
}
dir(data)
dir("data")
ptMake <- readRDS("data/parkingtickets_make.rds")
ptMake
dir("data")
ptOffence <- readRDS("data/offence.rds")
ptOffence <- readRDS("data/parkingtickets_offence.rds")
ptOffence
ptCounts <- readRDS("data/sqlite_sequence.rds")
ptCounts
ptData <- readRDS("data/parkingtickets_ticket.rds")
readRDS("data/sqlite_sequence.rds")
(readRDS("data/sqlite_sequence.rds"))
(readRDS("data/parkingtickets_make.rds"))
dim(ptData)
dim(ptData)
(readRDS("data/sqlite_sequence.rds"))
con <- dbConnect("SQLite", ticket.db)
library(RSQLite)
con <- dbConnect("SQLite", ticket.db)
tickets <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
ticket.db <- "raw_data/parkingtickets.sqlite"
con <- dbConnect("SQLite", ticket.db)
tickets <- dbGetQuery(con, "SELECT * FROM parkingtickets_ticket")
dim(tickets) # WOW, 1.5 million rows. This'll be fun.
238482+277797+294478+274529+243830+181235+121036
ptData <- read.csv("data/parkingtickets_ticket.csv")
dim(ptData)
head(ptData)
ptData <- read.csv("data/parkingtickets_ticket.csv", header=FALSE)
dim(ptData)
head(ptData)
ptDataNames <- names(readRDS("data/parkingtickets_ticket.rds"))
ptDataNames
names(ptData) <- ptDataNames
dim(ptData)
head(ptData)
summary(ptData$fine)
ptData2 <- readRDS("data/parkingtickets_ticket.rds")
summary(ptData2)
