dim(ptDat)
str(ptDat)
ptDat <- read.csv("data_01_raw/parkingtickets.csv")
ptDat <- read.csv("data_01_raw/parkingtickets.csv", header=TRUE,
stringsAsFactors=FALSE)
dim(ptDat)
names(ptDat)
str(ptDat)
saveRDS(ptDat, "data_01_raw/parkingtickets.rds")
ptDat <- readRDS("data_01_raw/parkingtickets.rds")
dim(ptDat)
names(ptDat)
str(ptDat)
summary(ptDat$fine)
unique(ptDat$fine)
ptDat <- ptDat[-"fine"]
ptDat <- subset(ptDat, select=-"fine")
ptDat <- subset(ptDat, select=-fine)
names(ptDat)
dim(ptDat)
names(ptDat)
unique(ptDat$fine)
ptDat <- subset(ptDat, select=-fine)
dim(ptDat)
names(ptDat)
identical(c(1:nrow(ptDat)), ptDat$id)
ptDat <- subset(ptDat, select=-id)
dim(ptDat)
names(ptDat)
class(ptDat$datetime)
as.Date(head(ptDat$datetime), format="%F %T %Z")
as.Date(head(ptDat$datetime), format="%F %T")
head(ptDat$datetime)
library(lubridate)
install.packages("lubridate")
library(lubridate)
VERSION
version
ymd_hms(head(ptDat$datetime))
ymd_hms(head(ptDat$datetime), tz="America/Vancouver")
class(ymd_hms(head(ptDat$datetime), tz="America/Vancouver"))
ptDat$datetime <- ymd_hms(ptDat$datetime, tz="America/Vancouver")
names(ptDat)
class(ptDat$datetime)
names(ptDat)
class(ptDat$date)
ymd_hms(head(ptDat$date))
ymd(head(ptDat$date))
ymd(head(ptDat$date), tz="America/Vancouver")
ptDat$date <- ymd(ptDat$date, tz="America/Vancouver")
class(ptDat$date)
head(ptDat$time)
class(ptDat$time)
hms(head(ptDat$time))
hms(head(ptDat$time), tz="America/Vancouver")
hms(head(ptDat$time))
class(hms(head(ptDat$time)))
ptDat$time <- hms(ptDat$time)
ptDat$time
as.character(head(ptDat$time))
# Read in the data
ptDat <- readRDS("data_01_raw/parkingtickets.rds")
# The last column seems to be all the same
unique(ptDat$fine)
ptDat <- subset(ptDat, select=-fine)
dim(ptDat)
names(ptDat)
# The first column seems to be the row number
identical(c(1:nrow(ptDat)), ptDat$id) # This returns TRUE
ptDat <- subset(ptDat, select=-id)
dim(ptDat)
names(ptDat)
# Now some columns should be read as dates! Let us convert to R's date objects
class(ptDat$datetime)
# Test conversion to POSIX date object
ymd_hms(head(ptDat$datetime), tz="America/Vancouver")
# Do it for the entire data set
ptDat$datetime <- ymd_hms(ptDat$datetime, tz="America/Vancouver")
class(ptDat$datetime)
# The "date" column is also just character. Convert to date object
class(ptDat$date)
# Test conversion
ymd(head(ptDat$date), tz="America/Vancouver")
# Do it for the entire data set
ptDat$date <- ymd(ptDat$date, tz="America/Vancouver")
class(ptDat$date)
names(ptDat)
summary(make_denorm)
summary(ptDat$make_denorm)
unique(ptDat$make_denorm)
ptDat$make_denorm <- factor(ptDat$make_denorm)
summary(ptDat$make_denorm)
plot(ptDat$make_denorm)
levels(ptDat)
levels(ptDat$make_denorm)
names(ptDat)
unique(ptDat$offence_denorm)
ptDat$offence_denorm <- factor(ptDat$offence_denorm)
summary(ptDat$offence_denorm)
levels(ptDat$offence_denorm)
names(ptDat)
summary(ptDat$record_id)
summary(ptDat$record_id)
hist(ptDat$record_id)
summary(ptDat$make_id)
summary(ptDat$offence_id)
ptDat <- subset(ptDat, subset=-c(record_id, make_id, offence_id))
ptDat <- subset(ptDat, select=-c(record_id, make_id, offence_id))
names(ptDat)
ptDat$details
summary(ptDat$details)
unique(ptDat$details)
unique(ptDat$detailsm, na.rm=TRUE)
ptDat <- subset(ptDat, select=-details)
names(ptDat)
names(ptDat)
saveRDS(ptDat, "data_02_clean/parkingtickets_clean.rds")
write.csv(ptDat, "data_02_clean/parkingtickets_clean.csv", row.names=FALSE)
install.packages("ggplot2")
library(ggplot2)
gg.pt <- ggplot(data=ptDat)
names(ptDat)
ptDat <- readRDS("data_02_clean/parkingtickets_clean.rds")
dim(ptDat)
str(ptDat)
names(ptDat)
names(ptDat)
gg.pt <- ggplot(data=ptDat)
gg.pt + geom_bar(aes(x=make_denorm))
library(plyr)
install.packages(c("colorspace", "evaluate", "foreign", "knitr", "lattice", "mgcv", "multcomp", "mvtnorm", "quantreg", "rgl"))
library(lubridate)
# For plotting pretty plots
library(plyr)
library(ggplot2)
gg.pt + geom_bar(aes(x=offence_denorm))
ggplot(data=arrange(ptDat, desc(offence_denorm))) +
geom_bar(aes(x=offence_denorm)) +
coord_flip()
arrange(ptDat, desc(table(offence_denorm)))
ggplot(data=arrange(ptDat, desc(names(table(offence_denorm))))) +
geom_bar(aes(x=offence_denorm)) +
coord_flip()
arrange(ptDat, desc(names(table(offence_denorm))))
table(offence_denorm)
table(ptDat$offence_denorm)
names(table(offence_denorm)))
names(table(offence_denorm))
table(ptDat$offence_denorm))
names(table(ptDat$offence_denorm))
arrange(ptDat, names(table(ptDat$offence_denorm)))
ptDat$offence_denorm <- factor(ptDat$offence_denorm,
levels=names(table(ptDat$offence_denorm)))
ggplot(data=ptDat) +
geom_bar(aes(x=offence_denorm)) +
coord_flip()
ptDat$offence_denorm
ptDat <- readRDS("data_02_clean/parkingtickets_clean.rds")
ggplot(data=ptDat) +
geom_bar(aes(x=offence_denorm)) + coord_flip()
factor(ptDat$offence_denorm,
levels=names(table(ptDat$offence_denorm)))
ptDat$offence_denorm
names(sort(table(ptDat$offence_denorm))))
names(sort(table(ptDat$offence_denorm)))
ptDat$offence_denorm <- factor(ptDat$offence_denorm,
levels=names(sort(table(ptDat$offence_denorm),
decreasing=TRUE)))
ggplot(data=ptDat) +
geom_bar(aes(x=offence_denorm)) +
coord_flip()
ptDat$offence_denorm <- factor(ptDat$offence_denorm,
levels=names(sort(table(ptDat$offence_denorm),
decreasing=FALSE)))
ggplot(data=ptDat) +
geom_bar(aes(x=offence_denorm)) +
coord_flip()
ggplot(data=ptDat) +
geom_bar(aes(x=make_denorm)) +
coord_flip()
names(sort(table(ptDat$make_denorm),
decreasing=FALSE))
names(sort(table(ptDat$make_denorm),
decreasing=FALSE))
ptDat$make_denorm <- factor(ptDat$make_denorm,
levels=names(sort(table(ptDat$make_denorm),
decreasing=FALSE)))
ggplot(data=ptDat) +
geom_bar(aes(x=make_denorm)) +
coord_flip()
names(ptDat)
summary(ptDat$make_denorm)
summary(ptDat$make_denorm)
summary(ptDat$make_denorm)
summary(ptDat$make_denorm)
tab.make <- table(ptDat$make_denorm)
tab.make
which(tab.make <= 10)
tab.make
which(tab.make <= 10)
names(tab.make)[-which(tab.make <= 10)]
make2 <- factor(ptDat$make_denorm,
levels=names(tab.make)[-which(tab.make <= 10)])
make2
summary(make2)
make2[is.na(make2)]
make2[is.na(make2)] <- "Other"
make2 <- factor(ptDat$make_denorm,
levels=c(names(tab.make)[-which(tab.make <= 10)],
"Other")
)
summary(make2)
make2[is.na(make2)] <- "Other"
summary(make2)
ggplot(data=data.frame(make2)) +
geom_bar(aes(x=make2)) +
coord_flip()
make2 <- factor(ptDat$make_denorm,
levels=c("Other",
names(tab.make)[-which(tab.make <= 10)]))
summary(make2)
make2[is.na(make2)] <- "Other"
summary(make2)
# Lets try the plot again
ggplot(data=data.frame(make2)) +
geom_bar(aes(x=make2)) +
coord_flip()
ptDat$make_denorm2 <- make2
ggplot(data=ptDat) +
geom_bar(aes(x=make_denorm2, colour=offence_denorm)) +
coord_flip()
geom_bar(aes(x=make_denorm2, fill=offence_denorm)) +
ggplot(data=ptDat) +
geom_bar(aes(x=make_denorm2, fill=offence_denorm)) +
coord_flip()
ggplot(data=ptDat) +
geom_bar(aes(x=make_denorm2, fill=offence_denorm), position="fill") +
coord_flip()
names(ptDat)
ptDatYearSum <- ddply(ptDat, ~year(date),
count=length(date))
count=length(date))
ptDatYearSum
names(ptDat)
length(ptDat$date)
table(year(ptDat$date))
ptDatYearSum <- ddply(ptDat, ~year(date),
count=length(plate))
head(ptDatYearSum)
dim(ptDatYearSum)
table(year(ptDat$date))
ptDatYearTab <- table(year(ptDat$date))
data.frame(ptDatYearTab)
ptDatYear <- table(year(ptDat$date))
names(ptDatYear) <- c("year", "freq")
names(ptDatYear)
ptDatYear
ptDatYear <- table(year(ptDat$date))
# Make into data frame for plotting
ptDatYear <- data.frame(ptDatYear)
names(ptDatYear) <- c("year", "freq")
ggplot(data=ptDatYear) +
geom_bar(aes(x=year))
ptDatYear
ggplot(data=ptDatYear) +
geom_bar(aes(x=year, y=freq))
geom_bar(aes(x=year, y=freq), stat="identity")
ggplot(data=ptDatYear) +
geom_bar(aes(x=year, y=freq), stat="identity")
ptDatMonth <- table(month(ptDat$date))
ptDatMonth <- data.frame(ptDatMonth)
ptDatMonth
names(ptDatYear) <- c("month", "freq")
ggplot(data=ptDatMonth) +
geom_bar(aes(x=month, y=freq), stat="identity")
names(ptDatMonth) <- c("month", "freq")
# Plot bar chart
ggplot(data=ptDatMonth) +
geom_bar(aes(x=month, y=freq), stat="identity")
ptDatYear <- table(year(ptDat$date))
# Make into data frame for plotting
ptDatYear <- data.frame(ptDatYear)
names(ptDatYear) <- c("year", "freq")
names(ptDat)
ptDatYearMonth <- ddply(ptDat, ~year(date)+month(date),
freq=length(plate))
dim(ptDatYearMonth)
ptDat$year <- year(ptDat$date)
ptDat$month <- month(ptDat$date)
ptDat$day <- day(ptDat$date)
ptDat$hour <- hour(ptDat$datetime)
names(ptDat)
# Save it! Save it as a csv file and a rds file.
dir.create("data_02_clean")
saveRDS(ptDat, "data_02_clean/parkingtickets_clean.rds")
write.csv(ptDat, "data_02_clean/parkingtickets_clean.csv", row.names=FALSE)
# For working with dates
library(lubridate)
# For plotting pretty plots
library(ggplot2)
# For data aggregation
library(plyr)
# Read in the data
ptDat <- readRDS("data_02_clean/parkingtickets_clean.rds")
dim(ptDat)
str(ptDat)
names(ptDat)
# Explore the clean data --------------------------------------------------
names(ptDat)
ddply(ptDat, ~year, length(year))
ddply(ptDat, ~year, freq=length(year))
ptDatYear <- ddply(ptDat, ~year, summarize, freq=length(year))
ptDatYear
ggplot(data=ptDatYear) +
geom_bar(aes(x=year, y=freq), stat="identity")
ptDatMonth <- ddply(ptDat, ~month, summarize, freq=length(month))
ggplot(data=ptDatMonth) +
geom_bar(aes(x=month, y=freq), stat="identity")
ptDatYearMonth <- ddply(ptDat, ~year+month, summarize,
freq=length(year))
ptDatYearMonth
ggplot(data=ptDatYearMonth) +
geom_path(aes(x=month, y=freq)) +
facet_wrap(~year)
ggplot(data=ptDatYearMonth) +
geom_bar(aes(x=month, y=freq), stat="identity") +
facet_wrap(~year)
ggplot(data=ptDatYearMonth) +
geom_bar(aes(x=as.factor(month), y=freq), stat="identity") +
facet_wrap(~year)
# Plot bar chart
ggplot(data=ptDatYear) +
geom_bar(aes(x=as.factor(year), y=freq), stat="identity")
ggplot(data=ptDatYearMonth) +
geom_path(aes(x=as.factor(month), y=freq)) +
facet_wrap(~year)
ggplot(data=ptDatYearMonth) +
geom_path(aes(x=month, y=freq)) +
facet_wrap(~year)
mondays(ptDat$date)
mondays(ptDat$date)
library(lubridate)
weekdays(ptDat$date)
weekdays(head(ptDat$date))
#####
# Data cleaning step.
# Some light data cleaning: Remove unwanted columns, make sure the columns
# are the right types.
#####
# Set up ------------------------------------------------------------------
# To help us work with dates in R.
# install.packages("lubridate")
library(lubridate)
# Read in data and verify -------------------------------------------------
# Check the data files
dir('data_01_raw')
# Read in the parking ticket csv data that we dumped from the MYSQL data base
# ptDat <- read.csv("data_01_raw/parkingtickets.csv", header=TRUE,
#                   stringsAsFactors=FALSE)
# Save it as an rds file for easy reading
# saveRDS(ptDat, "data_01_raw/parkingtickets.rds")
# Read in the data
ptDat <- readRDS("data_01_raw/parkingtickets.rds")
# Verify the data. We know it should have ~1.6 million rows
dim(ptDat)
names(ptDat)
str(ptDat)
# Fix up the data set -----------------------------------------------------
# Some minor things we have to do to have the data nice in R
# The last column seems to be all the same
unique(ptDat$fine)
ptDat <- subset(ptDat, select=-fine)
dim(ptDat)
names(ptDat)
# The first column seems to be the row number
identical(c(1:nrow(ptDat)), ptDat$id) # This returns TRUE
ptDat <- subset(ptDat, select=-id)
dim(ptDat)
names(ptDat)
# Now some columns should be read as dates! Let us convert to R's date objects
class(ptDat$datetime)
# Test conversion to POSIX date object
ymd_hms(head(ptDat$datetime), tz="America/Vancouver")
# Do it for the entire data set
ptDat$datetime <- ymd_hms(ptDat$datetime, tz="America/Vancouver")
class(ptDat$datetime)
# The "date" column is also just character. Convert to date object
class(ptDat$date)
# Test conversion
ymd(head(ptDat$date), tz="America/Vancouver")
# Do it for the entire data set
ptDat$date <- ymd(ptDat$date, tz="America/Vancouver")
class(ptDat$date)
# Leave the time as a character column.
# We may change it to a lubridate time object later for the data analysis.
# Check out the make_denorm column
unique(ptDat$make_denorm)
# This seems like it should be a factor
ptDat$make_denorm <- factor(ptDat$make_denorm)
summary(ptDat$make_denorm)
levels(ptDat$make_denorm)
# Check out the possible offences
unique(ptDat$offence_denorm)
# This should be a factor, too!
ptDat$offence_denorm <- factor(ptDat$offence_denorm)
summary(ptDat$offence_denorm)
levels(ptDat$offence_denorm)
# What is record id? make_id? offence_id?
# Seems like the primary keys of different tables when the data was in a MYSQL
# data base
summary(ptDat$record_id)
summary(ptDat$make_id)
summary(ptDat$offence_id)
# These can all be dropped
ptDat <- subset(ptDat, select=-c(record_id, make_id, offence_id))
# What is details?
summary(ptDat$details)
unique(ptDat$detailsm, na.rm=TRUE)
# Well, we can drop this column as well. There is nothing of interest!
ptDat <- subset(ptDat, select=-details)
# Fix the factor levels
ptDat$offence_denorm <- factor(ptDat$offence_denorm,
levels=names(sort(table(ptDat$offence_denorm),
decreasing=FALSE)))
ptDat$make_denorm <- factor(ptDat$make_denorm,
levels=names(sort(table(ptDat$make_denorm),
decreasing=FALSE)))
# Some very rare appearances. Let us make a new category that groups makes of cars
# that appear 10 or less times
summary(ptDat$make_denorm)
tab.make <- table(ptDat$make_denorm)
make2 <- factor(ptDat$make_denorm,
levels=c("Other",
names(tab.make)[-which(tab.make <= 10)]))
summary(make2)
make2[is.na(make2)] <- "Other"
summary(make2)
# Add to data frame
ptDat$make_denorm2 <- make2
rm(make2)
rm(tab.make)
# Add "Year", "Month", "Day", "Hour" variables to our data set
ptDat$year <- year(ptDat$date)
ptDat$month <- month(ptDat$date)
ptDat$day <- day(ptDat$date)
ptDat$wday <- weekdays(ptDat$date)
ptDat$hour <- hour(ptDat$datetime)
# Our "cleaned" data set.
names(ptDat)
# Save it! Save it as a csv file and a rds file.
dir.create("data_02_clean")
saveRDS(ptDat, "data_02_clean/parkingtickets_clean.rds")
write.csv(ptDat, "data_02_clean/parkingtickets_clean.csv", row.names=FALSE)
# OK! Now lets do some exploring (in the next script)
summary(ptDat$wday)
weekdays
weekdays()
unique(ptDat$wday)
ptDat$wday <- factor(weekdays(ptDat$date),
levels=c("Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday")
)
# Save it! Save it as a csv file and a rds file.
dir.create("data_02_clean")
saveRDS(ptDat, "data_02_clean/parkingtickets_clean.rds")
write.csv(ptDat, "data_02_clean/parkingtickets_clean.csv", row.names=FALSE)
# For working with dates
library(lubridate)
# For plotting pretty plots
library(ggplot2)
# For data aggregation
library(plyr)
install.packages("colorspace")
library(ggplot)
library(ggplot2)
# How about parking tickets by day of the week?
ggplot(data=ptDat) +
geom_bar(aes(x=wday))
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_wrap(~month)
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_wrap(~year)
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_grid(year~month)
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
coord_flip()
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_wrap(~month) +
coord_flip() + scale_x_reverse()
?scale_x_reverse()
ptDat$wday <- factor(ptDat$wdat,
levels=rev(levels(ptDat$wdat)))
ptDat$wday <- factor(ptDat$wday,
levels=rev(levels(ptDat$wday)))
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
coord_flip()
# By month?
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_wrap(~month) +
coord_flip()
# Year and month?
ggplot(data=ptDat) +
geom_bar(aes(x=wday)) +
facet_grid(year~month) +
coord_flip()
